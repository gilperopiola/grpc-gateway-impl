{
	"info": {
		"_postman_id": "36b1cc57-9f4e-44f6-a383-7e4cfd2b5348",
		"name": "üêøÔ∏è GRPC Gateway Impl.",
		"description": "Pre-request Scripts and Tests are used across the Collection to set environment variables and other necessary stuff.\n\nThe BaseURL, for example, is configured on the Pre-Request Script of this Collection.\n\nüöÄ",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5310198"
	},
	"item": [
		{
			"name": "Happy Path",
			"item": [
				{
					"name": "Health OK",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (pm.environment.get(\"baseURL\") == \"\") {\r",
									"    postman.setEnvironmentVariable(\"baseURL\", \"localhost:8083\")\r",
									"\r",
									"    utils = {\r",
									"        generateRandomString: function (length){\r",
									"            const characters = 'abcdefghijklmnopqrstuvwxyz';\r",
									"            let result = '';\r",
									"            \r",
									"            for (let i = 0; i < length; i++) {\r",
									"                result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"            }\r",
									"\r",
									"            return result;\r",
									"        },\r",
									"    }\r",
									"}\r",
									"\r",
									"let username = \"user\" + utils.generateRandomString(8)\r",
									"postman.setEnvironmentVariable(\"username\", username);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => { pm.response.to.have.status(200) });\r",
									"\r",
									"var response = pm.response.json();\r",
									"pm.test(\"Response has a field 'info' with a numeric value\", () => {\r",
									"    pm.expect(response).to.have.property(\"info\");\r",
									"    pm.expect(response.info).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"p4ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/health/check",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"health",
								"check"
							]
						}
					},
					"response": []
				},
				{
					"name": "Signup OK",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (pm.environment.get(\"baseURL\") == \"\") {\r",
									"    postman.setEnvironmentVariable(\"baseURL\", \"localhost:8083\")\r",
									"\r",
									"    utils = {\r",
									"        generateRandomString: function (length){\r",
									"            const characters = 'abcdefghijklmnopqrstuvwxyz';\r",
									"            let result = '';\r",
									"            \r",
									"            for (let i = 0; i < length; i++) {\r",
									"                result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"            }\r",
									"\r",
									"            return result;\r",
									"        },\r",
									"    }\r",
									"}\r",
									"\r",
									"let username = \"user\" + utils.generateRandomString(8)\r",
									"postman.setEnvironmentVariable(\"username\", username);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => { pm.response.to.have.status(200) });\r",
									"\r",
									"var response = pm.response.json();\r",
									"pm.test(\"Response has a field 'id' with a numeric value\", () => {\r",
									"    pm.expect(response).to.have.property(\"id\");\r",
									"    pm.expect(response.id).to.be.a(\"number\");\r",
									"\tpm.environment.set(\"user_id\", response.id);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"p4ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/auth/signup",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
									"\r",
									"var responseData = pm.response.json();\r",
									"pm.test(\"Response has a field 'token' with a string\", function () {\r",
									"    pm.expect(responseData).to.have.property(\"token\");\r",
									"    pm.expect(responseData.token).to.be.a(\"string\");\r",
									"\tpm.environment.set(\"token\", responseData.token);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"p4ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/auth/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
									"\r",
									"var responseData = pm.response.json();\r",
									"pm.test(\"Response has a field 'user'\", function () {\r",
									"    pm.expect(responseData).to.have.property(\"user\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseURL}}/v1/users/{{user_id}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Admin OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
									"\r",
									"var responseData = pm.response.json();\r",
									"pm.test(\"Response has a field 'token' with a string\", function () {\r",
									"    pm.expect(responseData).to.have.property(\"token\");\r",
									"    pm.expect(responseData.token).to.be.a(\"string\");\r",
									"\tpm.environment.set(\"token_admin\", responseData.token);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"please_set_the_env_var\"\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/auth/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
									"\r",
									"var responseData = pm.response.json();\r",
									"pm.test(\"Response has a field 'users'\", function () {\r",
									"    pm.expect(responseData).to.have.property(\"users\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_admin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseURL}}/v1/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users OK With Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
									"\r",
									"var responseData = pm.response.json();\r",
									"pm.test(\"Response has a field 'users'\", function () {\r",
									"    pm.expect(responseData).to.have.property(\"users\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseURL}}/v1/users?filter=admin",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"users"
							],
							"query": [
								{
									"key": "filter",
									"value": "admin"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "New GPT Chat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"message\": \"And how do they compare?\"\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/gpt",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"gpt"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Error Scenarios",
			"item": [
				{
					"name": "Signup Existing Username",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"var responseData = pm.response.json();\r",
									"pm.test(\"Response has a field 'error'\", function () {\r",
									"    pm.expect(responseData).to.have.property(\"error\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"p4ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/auth/signup",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Signup Without Body",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var responseData = pm.response.json();\r",
									"pm.test(\"Response has a field 'error'\", function () {\r",
									"    pm.expect(responseData).to.have.property(\"error\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseURL}}/v1/auth/signup",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Signup Invalid Username",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var responseData = pm.response.json();\r",
									"pm.test(\"Response has a field 'error'\", function () {\r",
									"    pm.expect(responseData).to.have.property(\"error\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"invalid_username_invalid_username_invalid_username\",\r\n    \"password\": \"p4ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/auth/signup",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Signup Invalid Password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var responseData = pm.response.json();\r",
									"pm.test(\"Response has a field 'error'\", function () {\r",
									"    pm.expect(responseData).to.have.property(\"error\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"username\",\r\n    \"password\": \"invalid_p4ssw0rd_invalid_p4ssw0rd_invalid_p4ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/auth/signup",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Non Existing User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var responseData = pm.response.json();\r",
									"pm.test(\"Response has a field 'error'\", function () {\r",
									"    pm.expect(responseData).to.have.property(\"error\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"non_existing_user\",\r\n    \"password\": \"p4ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/auth/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Wrong Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"var responseData = pm.response.json();\r",
									"pm.test(\"Response has a field 'error'\", function () {\r",
									"    pm.expect(responseData).to.have.property(\"error\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"wr0ng_p4ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/auth/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Without Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var responseData = pm.response.json();\r",
									"pm.test(\"Response has a field 'error'\", function () {\r",
									"    pm.expect(responseData).to.have.property(\"error\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseURL}}/v1/auth/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Without JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"var responseData = pm.response.json();\r",
									"pm.test(\"Response has a field 'error'\", function () {\r",
									"    pm.expect(responseData).to.have.property(\"error\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseURL}}/v1/users/{{user_id}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Empty Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"var responseData = pm.response.json();\r",
									"pm.test(\"Response has a field 'error'\", function () {\r",
									"    pm.expect(responseData).to.have.property(\"error\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseURL}}/v1/users/{{user_id}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Wrong Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"var responseData = pm.response.json();\r",
									"pm.test(\"Response has a field 'error'\", function () {\r",
									"    pm.expect(responseData).to.have.property(\"error\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InVzZXJfYmRjZCIsInJvbGUiOiJkZWZhdWx0IiwiZXhwIjoxNzEwOTExODYyLCJpYXQiOjE3MTAzMDcwNjIsImp0aSI6IjE0In0.Brwtug0khD3umyca9C00t0Rj6c9tTH_ywV4jerHGUdQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseURL}}/v1/users/{{user_id}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Wrong UserID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"var responseData = pm.response.json();\r",
									"pm.test(\"Response has a field 'error'\", function () {\r",
									"    pm.expect(responseData).to.have.property(\"error\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseURL}}/v1/users/1",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users Non Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"var responseData = pm.response.json();\r",
									"pm.test(\"Response has a field 'error'\", function () {\r",
									"    pm.expect(responseData).to.have.property(\"error\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseURL}}/v1/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users Invalid Params",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var responseData = pm.response.json();\r",
									"pm.test(\"Response has a field 'error'\", function () {\r",
									"    pm.expect(responseData).to.have.property(\"error\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseURL}}/v1/users?page=0&page_size=500",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "page_size",
									"value": "500"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"postman.setEnvironmentVariable(\"baseURL\", \"localhost:8083\")",
					"",
					"utils = {",
					"    generateRandomString: function (length){",
					"        const characters = 'abcdefghijklmnopqrstuvwxyz';",
					"        let result = '';",
					"\t\t",
					"        for (let i = 0; i < length; i++) {",
					"            result += characters.charAt(Math.floor(Math.random() * characters.length));",
					"        }",
					"",
					"        return result;",
					"    },",
					"}",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}