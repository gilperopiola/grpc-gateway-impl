{
  "swagger": "2.0",
  "info": {
    "title": "grpc-gateway-impl-users-svc",
    "description": "User Management Service",
    "version": "1.0"
  },
  "tags": [
    {
      "name": "UsersSvc"
    }
  ],
  "host": "localhost:8083",
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/users": {
      "get": {
        "summary": "Gets a list of users, optionally paginated and filtered by username. Admin only.",
        "operationId": "GetUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".users.GetUsersResponse"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "example": {
                "error": "validation error: username value length must be at least 4 characters."
              }
            }
          },
          "401": {
            "description": "",
            "schema": {
              "example": {
                "error": "unauthorized."
              }
            }
          },
          "403": {
            "description": "",
            "schema": {
              "example": {
                "error": "forbidden error."
              }
            }
          },
          "404": {
            "description": "",
            "schema": {
              "example": {
                "error": "not found: username not found."
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "example": {
                "error": "internal server error, something went wrong on our end."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "description": "Page number.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": "1"
          },
          {
            "name": "page_size",
            "description": "Users per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": "10"
          },
          {
            "name": "filter",
            "description": "Username filter.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users",
          "GetMany",
          "AdminOnly"
        ]
      }
    },
    "/v1/users/{userId}": {
      "get": {
        "summary": "Returns the information of a user with a given ID. Requires a JWT Token with a matching user's ID.",
        "operationId": "GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".users.GetUserResponse"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "example": {
                "error": "validation error: username value length must be at least 4 characters."
              }
            }
          },
          "401": {
            "description": "",
            "schema": {
              "example": {
                "error": "unauthorized."
              }
            }
          },
          "403": {
            "description": "",
            "schema": {
              "example": {
                "error": "forbidden error."
              }
            }
          },
          "404": {
            "description": "",
            "schema": {
              "example": {
                "error": "not found: username not found."
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "example": {
                "error": "internal server error, something went wrong on our end."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Users",
          "GetOne",
          "SelfOnly"
        ]
      },
      "delete": {
        "summary": "Soft-Deletes a user.",
        "operationId": "DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".users.DeleteUserResponse"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "example": {
                "error": "validation error: username value length must be at least 4 characters."
              }
            }
          },
          "401": {
            "description": "",
            "schema": {
              "example": {
                "error": "unauthorized."
              }
            }
          },
          "403": {
            "description": "",
            "schema": {
              "example": {
                "error": "forbidden error."
              }
            }
          },
          "404": {
            "description": "",
            "schema": {
              "example": {
                "error": "not found: username not found."
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "example": {
                "error": "internal server error, something went wrong on our end."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Users",
          "DeleteOne",
          "SelfOnly"
        ]
      },
      "put": {
        "summary": "Updates a user's information.",
        "operationId": "UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".users.UpdateUserResponse"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "example": {
                "error": "validation error: username value length must be at least 4 characters."
              }
            }
          },
          "401": {
            "description": "",
            "schema": {
              "example": {
                "error": "unauthorized."
              }
            }
          },
          "403": {
            "description": "",
            "schema": {
              "example": {
                "error": "forbidden error."
              }
            }
          },
          "404": {
            "description": "",
            "schema": {
              "example": {
                "error": "not found: username not found."
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "example": {
                "error": "internal server error, something went wrong on our end."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UsersSvcUpdateUserBody"
            }
          }
        ],
        "tags": [
          "Users",
          "UpdateOne",
          "SelfOnly"
        ]
      }
    },
    "/v1/users/{userId}/groups": {
      "get": {
        "summary": "Retrieves the groups of the user.",
        "operationId": "GetMyGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": ".users.GetMyGroupsResponse"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "example": {
                "error": "validation error: username value length must be at least 4 characters."
              }
            }
          },
          "401": {
            "description": "",
            "schema": {
              "example": {
                "error": "unauthorized."
              }
            }
          },
          "403": {
            "description": "",
            "schema": {
              "example": {
                "error": "forbidden error."
              }
            }
          },
          "404": {
            "description": "",
            "schema": {
              "example": {
                "error": "not found: username not found."
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "example": {
                "error": "internal server error, something went wrong on our end."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "Page number.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": "1"
          },
          {
            "name": "page_size",
            "description": "Groups per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": "10"
          },
          {
            "name": "filter",
            "description": "Group name filter.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Groups",
          "GetMany",
          "SelfOnly"
        ]
      }
    }
  },
  "definitions": {
    "UsersSvcUpdateUserBody": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "Username of the user to update."
        }
      }
    },
    "pbsDeleteUserResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "$ref": "#/definitions/pbsUserInfo",
          "readOnly": true
        }
      }
    },
    "pbsGetMyGroupsResponse": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbsGroupInfo"
          },
          "readOnly": true
        },
        "pagination": {
          "$ref": "#/definitions/pbsPaginationInfo",
          "readOnly": true
        }
      }
    },
    "pbsGetUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/pbsUserInfo",
          "readOnly": true
        }
      }
    },
    "pbsGetUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbsUserInfo"
          },
          "readOnly": true
        },
        "pagination": {
          "$ref": "#/definitions/pbsPaginationInfo",
          "readOnly": true
        }
      }
    },
    "pbsGroupInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "owner": {
          "$ref": "#/definitions/pbsUserInfo",
          "readOnly": true
        },
        "created_at": {
          "type": "string",
          "readOnly": true
        },
        "updated_at": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "pbsPaginationInfo": {
      "type": "object",
      "properties": {
        "current": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        }
      }
    },
    "pbsUpdateUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/pbsUserInfo",
          "readOnly": true
        }
      }
    },
    "pbsUserInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "username": {
          "type": "string",
          "readOnly": true
        },
        "created_at": {
          "type": "string",
          "readOnly": true
        },
        "updated_at": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
