// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: users.proto

package pbs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UsersSvc_GetUsers_FullMethodName    = "/pbs.UsersSvc/GetUsers"
	UsersSvc_GetUser_FullMethodName     = "/pbs.UsersSvc/GetUser"
	UsersSvc_UpdateUser_FullMethodName  = "/pbs.UsersSvc/UpdateUser"
	UsersSvc_DeleteUser_FullMethodName  = "/pbs.UsersSvc/DeleteUser"
	UsersSvc_GetMyGroups_FullMethodName = "/pbs.UsersSvc/GetMyGroups"
)

// UsersSvcClient is the client API for UsersSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersSvcClient interface {
	// Gets a list of users, optionally paginated and filtered by username. Admin only.
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	// Returns the information of a user with a given ID. Requires a JWT Token with a matching user's ID.
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// Updates a user's information.
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// Soft-Deletes a user.
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	// Retrieves the groups of the user.
	GetMyGroups(ctx context.Context, in *GetMyGroupsRequest, opts ...grpc.CallOption) (*GetMyGroupsResponse, error)
}

type usersSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersSvcClient(cc grpc.ClientConnInterface) UsersSvcClient {
	return &usersSvcClient{cc}
}

func (c *usersSvcClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, UsersSvc_GetUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersSvcClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, UsersSvc_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersSvcClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, UsersSvc_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersSvcClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, UsersSvc_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersSvcClient) GetMyGroups(ctx context.Context, in *GetMyGroupsRequest, opts ...grpc.CallOption) (*GetMyGroupsResponse, error) {
	out := new(GetMyGroupsResponse)
	err := c.cc.Invoke(ctx, UsersSvc_GetMyGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersSvcServer is the server API for UsersSvc service.
// All implementations must embed UnimplementedUsersSvcServer
// for forward compatibility
type UsersSvcServer interface {
	// Gets a list of users, optionally paginated and filtered by username. Admin only.
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	// Returns the information of a user with a given ID. Requires a JWT Token with a matching user's ID.
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// Updates a user's information.
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// Soft-Deletes a user.
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	// Retrieves the groups of the user.
	GetMyGroups(context.Context, *GetMyGroupsRequest) (*GetMyGroupsResponse, error)
	mustEmbedUnimplementedUsersSvcServer()
}

// UnimplementedUsersSvcServer must be embedded to have forward compatible implementations.
type UnimplementedUsersSvcServer struct {
}

func (UnimplementedUsersSvcServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUsersSvcServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUsersSvcServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUsersSvcServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUsersSvcServer) GetMyGroups(context.Context, *GetMyGroupsRequest) (*GetMyGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyGroups not implemented")
}
func (UnimplementedUsersSvcServer) mustEmbedUnimplementedUsersSvcServer() {}

// UnsafeUsersSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersSvcServer will
// result in compilation errors.
type UnsafeUsersSvcServer interface {
	mustEmbedUnimplementedUsersSvcServer()
}

func RegisterUsersSvcServer(s grpc.ServiceRegistrar, srv UsersSvcServer) {
	s.RegisterService(&UsersSvc_ServiceDesc, srv)
}

func _UsersSvc_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersSvcServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersSvc_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersSvcServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersSvc_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersSvcServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersSvc_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersSvcServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersSvc_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersSvcServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersSvc_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersSvcServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersSvc_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersSvcServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersSvc_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersSvcServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersSvc_GetMyGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersSvcServer).GetMyGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersSvc_GetMyGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersSvcServer).GetMyGroups(ctx, req.(*GetMyGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersSvc_ServiceDesc is the grpc.ServiceDesc for UsersSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbs.UsersSvc",
	HandlerType: (*UsersSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsers",
			Handler:    _UsersSvc_GetUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UsersSvc_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UsersSvc_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UsersSvc_DeleteUser_Handler,
		},
		{
			MethodName: "GetMyGroups",
			Handler:    _UsersSvc_GetMyGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users.proto",
}
