// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: gpt.proto

package pbs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GPTServiceClient is the client API for GPTService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GPTServiceClient interface {
	NewGPTChat(ctx context.Context, in *NewGPTChatRequest, opts ...grpc.CallOption) (*NewGPTChatResponse, error)
	ReplyToGPTChat(ctx context.Context, in *ReplyToGPTChatRequest, opts ...grpc.CallOption) (*ReplyToGPTChatResponse, error)
}

type gPTServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGPTServiceClient(cc grpc.ClientConnInterface) GPTServiceClient {
	return &gPTServiceClient{cc}
}

func (c *gPTServiceClient) NewGPTChat(ctx context.Context, in *NewGPTChatRequest, opts ...grpc.CallOption) (*NewGPTChatResponse, error) {
	out := new(NewGPTChatResponse)
	err := c.cc.Invoke(ctx, "/pbs.GPTService/NewGPTChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPTServiceClient) ReplyToGPTChat(ctx context.Context, in *ReplyToGPTChatRequest, opts ...grpc.CallOption) (*ReplyToGPTChatResponse, error) {
	out := new(ReplyToGPTChatResponse)
	err := c.cc.Invoke(ctx, "/pbs.GPTService/ReplyToGPTChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GPTServiceServer is the server API for GPTService service.
// All implementations must embed UnimplementedGPTServiceServer
// for forward compatibility
type GPTServiceServer interface {
	NewGPTChat(context.Context, *NewGPTChatRequest) (*NewGPTChatResponse, error)
	ReplyToGPTChat(context.Context, *ReplyToGPTChatRequest) (*ReplyToGPTChatResponse, error)
	mustEmbedUnimplementedGPTServiceServer()
}

// UnimplementedGPTServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGPTServiceServer struct {
}

func (UnimplementedGPTServiceServer) NewGPTChat(context.Context, *NewGPTChatRequest) (*NewGPTChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewGPTChat not implemented")
}
func (UnimplementedGPTServiceServer) ReplyToGPTChat(context.Context, *ReplyToGPTChatRequest) (*ReplyToGPTChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyToGPTChat not implemented")
}
func (UnimplementedGPTServiceServer) mustEmbedUnimplementedGPTServiceServer() {}

// UnsafeGPTServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GPTServiceServer will
// result in compilation errors.
type UnsafeGPTServiceServer interface {
	mustEmbedUnimplementedGPTServiceServer()
}

func RegisterGPTServiceServer(s grpc.ServiceRegistrar, srv GPTServiceServer) {
	s.RegisterService(&GPTService_ServiceDesc, srv)
}

func _GPTService_NewGPTChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewGPTChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPTServiceServer).NewGPTChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.GPTService/NewGPTChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPTServiceServer).NewGPTChat(ctx, req.(*NewGPTChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPTService_ReplyToGPTChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyToGPTChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPTServiceServer).ReplyToGPTChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.GPTService/ReplyToGPTChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPTServiceServer).ReplyToGPTChat(ctx, req.(*ReplyToGPTChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GPTService_ServiceDesc is the grpc.ServiceDesc for GPTService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GPTService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbs.GPTService",
	HandlerType: (*GPTServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewGPTChat",
			Handler:    _GPTService_NewGPTChat_Handler,
		},
		{
			MethodName: "ReplyToGPTChat",
			Handler:    _GPTService_ReplyToGPTChat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gpt.proto",
}
